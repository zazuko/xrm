grammar com.zazuko.rdfmapping.dsl.RdfMapping with org.eclipse.xtext.common.Terminals

generate rdfMapping "http://www.zazuko.com/rdfmapping/dsl/RdfMapping"

Domainmodel:
	('output' outputType=OutputTypeRef)?
    (elements+=Element)*;
  
Element:
    SourceGroup 
    | LogicalSource 
    | Vocabulary 
    | Mapping 
    | LanguageTagDefinition 
    | DialectGroup
    | XmlNamespaceExtension
    | TemplateDeclaration
;
	
LanguageTagDefinition: {LanguageTagDefinition}
	'language-tags' BLOCK_BEGIN
		(languageTags+=LanguageTag)*
	BLOCK_END;
	
LanguageTag:
	name=ID;
  
SourceGroup:
    'source-group' name=ID BLOCK_BEGIN
    	('type' typeRef=SourceTypeRef)?
    	('source' (sourceIsQuery ?= 'query')? source=STRING)?
    	(nullValueMarker=NullValueDeclaration)?
    	('dialect' dialect=[DialectGroup])?
    	('xml-namespace-extension' xmlNamespaceExtension=[XmlNamespaceExtension])?
    	(logicalSources+=LogicalSource)*
    BLOCK_END;
    
LogicalSource:
	'logical-source' name=ID BLOCK_BEGIN
		('type' typeRef=SourceTypeRef)?
		('source' (sourceIsQuery ?= 'query')? source=STRING)?
		(nullValueMarker=NullValueDeclaration)?
		('dialect' dialect=[DialectGroup])?
    	('xml-namespace-extension' xmlNamespaceExtension=[XmlNamespaceExtension])?
		('iterator' iterator=STRING)?
		'referenceables'
			(referenceables+=Referenceable)*
	BLOCK_END;
	
enum SourceType:
	XML='xml' 
	| RDB = 'rdb'
	| CSV = 'csv'
	| JSON = 'json'
	;

// do not reference an enum directly - if no value is declared, EMF will initialize the 
// reference with the first entry of the enum instead of null.
SourceTypeRef:
	type=SourceType
;

enum OutputType:
	CSVW = 'csvw'
	| RML = 'rml'
	| R2RML = 'r2rml'
	| CARML = 'carml'
;

OutputTypeRef:
	type=OutputType
;

Referenceable:	
    name=ID (value=STRING)? (nullValueMarker=NullValueDeclaration)?;
    
NullValueDeclaration:
	'null' nullValue=STRING;
    
DialectGroup:
	'dialect' name=ID BLOCK_BEGIN
		description=DialectGroupDescription
	BLOCK_END;

DialectGroupDescription:
	'delimiter' delimiter=STRING &
	('commentPrefix' commentPrefix=STRING)? &
	('doubleQuote' doubleQuote=BooleanLiteral)? &
	('encoding' encoding=STRING)? &
	('header' header=BooleanLiteral)? &
	('headerRowCount' headerRowCount=INT)? & 
	('lineTerminators' lineTerminators=STRING)? &
	('quoteChar' quoteChar=STRING)? & 
	('skipBlankRows' skipBlankRows=BooleanLiteral)? &
	('skipColumns' skipColumns=INT)? &
	('skipInitialSpace' skipInitialSpace=BooleanLiteral)? &
	('skipRows' skipRows=INT)? &
	('trim' trim=BooleanLiteral)?
	;

BooleanLiteral:
    value?='true' | {BooleanLiteral} 'false';
    
XmlNamespaceExtension:
	'xml-namespace-extension' name=ID BLOCK_BEGIN
		(prefixes+=Prefix)+
	BLOCK_END
;

Vocabulary:	
	'vocabulary' name=ID BLOCK_BEGIN
    	prefix=Prefix
		('classes' (classes+=RdfClass)* )?
	    ('properties' (properties+=RdfProperty)*)?
	    ('datatypes' (datatypes+=Datatype)*)?	
    BLOCK_END;
   
Prefix:
	'prefix' label=STRING iri=STRING;

VocabularyElement:
	RdfProperty | RdfClass | Datatype;
    
RdfProperty:
	name=ID (value=STRING)? ( omniMap=OmniMap )?;

RdfClass:
	name=ID (value=STRING)? ( omniMap=OmniMap )?;

Datatype:
	name=ID (value=STRING)? ( omniMap=OmniMap )?;

TemplateDeclaration:
	'template' name=ID value=TemplateValueDeclaration
;

TemplateValue:
	TemplateValueDeclaration | TemplateValueRef
;

TemplateValueDeclaration:
	templateValue=STRING
;

TemplateValueRef:
	templateDeclaration=[TemplateDeclaration]
;
    
Mapping:
	'map' name=ID 'from' source=[LogicalSource|QualifiedName] BLOCK_BEGIN
		'subject' subjectIriMapping=TemplateValuedTerm LINE_END
		 ('graphs' (graphMappings+=GraphMapping)+)?
		 ('types' (subjectTypeMappings+=SubjectTypeMapping)+)?
		 ('properties' (poMappings+=PredicateObjectMapping)+)?
	BLOCK_END;
	
SubjectTypeMapping:	
	type=[RdfClass|RdfPrefixedName]
;

GraphMapping:
	(template=TemplateValuedTerm | constant=ConstantValuedTerm) LINE_END
;

PredicateObjectMapping:	
	property=[RdfProperty|RdfPrefixedName] 
	term=ValuedTerm? // must be optional in order to get the quickfix working (must be serializable on missing term) --> manual validation for term === null
	// see: com.zazuko.rdfmapping.dsl.ui.quickfix.RealRdfMappingQuickfixProvider.missingRdfProperty(Issue, IssueResolutionAcceptor)
	lineEnd?=LINE_END // hack in order to improve code completion - see com.zazuko.rdfmapping.dsl.ide.contentassist.RdfMappingIdeProposalProvider._createProposals(Assignment, ContentAssistContext, IIdeContentProposalAcceptor) --> isLineEnd
;
	
ValuedTerm:
	  ReferenceValuedTerm 
	| MultiReferenceValuedTerm 
	| TemplateValuedTerm 
	| ConstantValuedTerm 
	| ParentTriplesMapTerm
;
	
ReferenceValuedTerm:
	'from' reference=[Referenceable]
	('with' 'datatype' datatype=[Datatype|RdfPrefixedName] | 'with' 'language-tag' languageTag=[LanguageTag])?
	('as' termTypeRef=TermTypeRef)?
;

MultiReferenceValuedTerm:
	'multi-reference' 'from' reference=[Referenceable]
	('with' 'datatype' datatype=[Datatype|RdfPrefixedName] | 'with' 'language-tag' languageTag=[LanguageTag])?
	('as' termTypeRef=TermTypeRef)?
;

ConstantValuedTerm:
	'constant' ( constant=STRING | constantVocabularyElement=[VocabularyElement|RdfPrefixedName] )
;

TemplateValuedTerm:
	'template' template=TemplateValue ('with' (references+=[Referenceable])+)?
	('as' termTypeRef=TermTypeRef)?
;
	
ParentTriplesMapTerm:
	'parent-map' mapping=[Mapping]
	(joinConditions+=ParentTriplesMapJoinCondition)*
;

ParentTriplesMapJoinCondition:
    'join' child=[Referenceable] 'with' parent=[Referenceable]
;

QualifiedName:
    ID ('.' ID)*;
    
// on EObjects to be addressed with RdfPrefixedName, don't forget to change 
/// com.zazuko.rdfmapping.dsl.ui.contentassist.RealRdfMappingProposalProvider.getStyledDisplayString(IEObjectDescription)
/// com.zazuko.rdfmapping.dsl.services.RdfDslConverters.RdfPrefixedName()
RdfPrefixedName:
	// ID ':' ID; // #71 
	ID '.' ID;
    
terminal BLOCK_BEGIN: '{';
terminal BLOCK_END: '}';
terminal LINE_END: ';';

enum TermType:
 Literal='Literal'
 | IRI='IRI'
 | BlankNode='BlankNode'
 ;
 
// do not reference an enum directly - if no value is declared, EMF will initialize the 
// reference with the first entry of the enum instead of null.
TermTypeRef:
	type=TermType
;

OmniMap:
	BLOCK_BEGIN
	  entries+=OmniMapEntry(','
	  	entries+=OmniMapEntry
	  )*
	BLOCK_END
;

OmniMapEntry:
	key=STRING':' value=STRING
;
