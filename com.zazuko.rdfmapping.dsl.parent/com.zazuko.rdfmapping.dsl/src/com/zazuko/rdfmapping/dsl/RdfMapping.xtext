grammar com.zazuko.rdfmapping.dsl.RdfMapping with org.eclipse.xtext.common.Terminals

generate rdfMapping "http://www.zazuko.com/rdfmapping/dsl/RdfMapping"

Domainmodel :
    (elements+=Element)*;
  
Element:
    SourceGroup | LogicalSource | PrefixHolder | Mapping |
    LanguageTagDefinition | DialectGroup;

enum SourceType:
	XML='xml' 
	| RDB = 'rdb'
	| CSV = 'csv'
	;

// do not reference an enum directly - if no value is declared, EMF will initialize the 
// reference with the first entry of the enum instead of null.
SourceTypeRef:
	type=SourceType
;
	
DatatypesDefinition: 
	'datatypes' name=ID '{'
		prefix=Prefix
		(types+=Datatype)*
	'}';
	
Datatype:
	name=ID (value=STRING)?;
	
LanguageTagDefinition: {LanguageTagDefinition}
	'language-tags' '{'
		(languageTags+=LanguageTag)*
	'}';
	
LanguageTag:
	name=ID;
  
SourceGroup:
    'source-group' name=ID '{'
    	('type' typeRef=SourceTypeRef)?
    	('source' (sourceIsQuery ?= 'query')? source=STRING)?
    	(logicalSources+=LogicalSource)*
    '}';
    
LogicalSource:
	'logical-source' name=ID '{'
		('type' typeRef=SourceTypeRef)?
		('source' (sourceIsQuery ?= 'query')? source=STRING)?
		('dialect' dialect=[DialectGroup])?
		'referenceables'
			(referenceables+=Referenceable)*
	'}';

Referenceable:	
    name=ID (value=STRING)?;
    
DialectGroup:
	'dialect' name=ID '{'
		'delimiter' delimiter=STRING &
		('commentPrefix' commentPrefix=STRING)? &
		('doubleQuote' doubleQuote=BooleanLiteral)? &
		('encoding' encoding=STRING)? &
		('header' header=BooleanLiteral)? &
		('headerRowCount' headerRowCount=INT)? & 
		('lineTerminators' lineTerminators=STRING)? &
		('quoteChar' quoteChar=STRING)? & 
		('skipBlankRows' skipBlankRows=BooleanLiteral)? &
		('skipColumns' skipColumns=INT)? &
		('skipInitialSpace' skipInitialSpace=BooleanLiteral)? &
		('skipRows' skipRows=INT)? &
		('trim' trim=BooleanLiteral)? &
	'}';

BooleanLiteral:
    value?='true' | {BooleanLiteral} 'false';
    
Vocabulary:	
	'vocabulary' name=ID '{'
    	prefix=Prefix
		('classes' (classes+=RdfClass)*)?
	    ('properties' (properties+=RdfProperty)*)?	
    '}';
   
PrefixHolder:
    DatatypesDefinition | Vocabulary;   
    
Prefix:
	'prefix' label=STRING iri=STRING;
    
RdfProperty:
	name=ID (value=STRING)?;
	
RdfClass:
	name=ID (value=STRING)?;	
    
Mapping:
	'map' name=ID 'from' source=[LogicalSource|QualifiedName] '{'
		'subject' subjectIriMapping=TemplateValuedTerm
		 ('types' (subjectTypeMappings+=SubjectTypeMapping)+ ';'?)?
		 ('properties' (poMappings+=PredicateObjectMapping)+)?
	'}';
	
SubjectTypeMapping:	
	type=[RdfClass|QualifiedName];

PredicateObjectMapping:	
	property=[RdfProperty|QualifiedName] 
	term=ValuedTerm;
	
ValuedTerm:
	ReferenceValuedTerm | TemplateValuedTerm | LinkedResourceTerm | ConstantValuedTerm;
	
ReferenceValuedTerm:
	'from' reference=[Referenceable]
	('with' 'datatype' datatype=[Datatype|QualifiedName] | 'with' 'language-tag' languageTag=[LanguageTag])?
	';'?;

ConstantValuedTerm:
	'constant' constant=STRING
	';'?;

TemplateValuedTerm:
	'template' template=STRING 'with' (references+=[Referenceable])+
	';'?;
	
LinkedResourceTerm:
	'link' mapping=[Mapping] 'with' (references+=[Referenceable])+
	 ';'?;

QualifiedName:
    ID ('.' ID)*;