/*
 * generated by Xtext 2.19.0
 */
package com.zazuko.rdfmapping.dsl.formatting2

import com.google.inject.Inject
import com.zazuko.rdfmapping.dsl.rdfMapping.DatatypesDefinition
import com.zazuko.rdfmapping.dsl.rdfMapping.Domainmodel
import com.zazuko.rdfmapping.dsl.rdfMapping.LogicalSource
import com.zazuko.rdfmapping.dsl.rdfMapping.SourceGroup
import com.zazuko.rdfmapping.dsl.services.RdfMappingGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

@SuppressWarnings("discouragedAccess")
class RdfMappingFormatter extends AbstractFormatter2 {
	
	@Inject extension RdfMappingGrammarAccess

	def dispatch void format(Domainmodel domainmodel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (element : domainmodel.elements) {
			element.format
		}
	}

	def dispatch void format(DatatypesDefinition datatypesDefinition, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		datatypesDefinition.prefix.format
		for (datatype : datatypesDefinition.types) {
			datatype.format;
		}
	}
	
	def dispatch void format(SourceGroup it, extension IFormattableDocument document) {
	 	for (LogicalSource current : logicalSources) {
	 		logicalSources.format;
	 	}
	}
	
	def dispatch void format(LogicalSource it, extension IFormattableDocument document) {
		append[newLine];
	}
}
