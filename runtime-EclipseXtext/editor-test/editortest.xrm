// TODO uncomment next line --> warning on 'map' + quickfix
output rml

// TODO uncomment next line - get error for duplicated TemplateDeclaration (also declared in editotest-csv.xrm)
//template anyTemplate "foo"
template airportIri "http://airport.example.com/{0}"
template exampleIri "http://example.com/"
// TODO uncomment next line --> error for duplicated template name
//template exampleIri "http://example.com/"
// TODO uncomment next line --> error for unparseable format
//template unparseable "http://airport.example.com/{0}/{b}"
// TODO uncomment next line --> error for skipped keys [1, 2]
// template skippingKeysIsPointless "http://airport.example.com/{0}/{3}"

map EmployeeMapping from EMPLOYEE {
	// TODO code complete on airportIri - get proposals of templates declared within this file
	// TODO add 'EMPNO' after id --> warn nr of arguments not matching with pattern
	subject template airportIri with id;

	// TODO uncomment next line (and comment the old subject-line) --> error + 'Literal' is not offered by code completion (offered are 'BlankNode' and 'IRI')
	// subject template "http://airport.example.com/{0}" with id as Literal;
	types
		// TODO hover over '.Employee', see the description of the class 'Employee' in the tooltip. the order is label, description, any other entries in order of the definition within the omnimap
		employee.Employee

	properties
		// TODO code completion before the next line - get references like 'thing.size' offered
		// TODO code completion on the next line between 'employee.no' and 'from' - keywords will be offered (no references to RdfProperties)
		employee.no from EMPNO;
		// TODO (reloaded) code completion before the next line - get references like 'thing.size' offered
		// TODO uncomment next line (error is fine), code completion at end of line offers keywords
		// thing.size 
		thing.color parent-map EmployeeMapping2; // ok for rml, r2rml
		// TODO 'as' must be offered by code completion (this is r2rml)
		keyword.^map template "{0}" with EMPNO as Literal; // ok for rml, r2rml 
		// TODO uncomment next line --> error
		// TODO code completion: no suggestion 'multi-reference'
		// keyword.^map multi-reference from EMPNO ;
		// TODO hover over '.yes', see the description of the property 'yes' in the tooltip
		employee.yes constant "constant-yes";
}

map EmployeeMapping2 from EMPLOYEE {
	subject template "http://airport.example.com/{0}" with id;

	types
		employee.Employee

	properties
		employee.no from EMPNO;
		thing.color template airportIri with id;
		thing.color template "http://manualstuff.com/colors/{0}" with id;
}

logical-source EMPLOYEE {
	type xml
	// TODO add another whitespace between 'query' and 'EMP', format --> have 1 whitespace again
	source query "EMP"
	// TODO uncomment next line --> error because of sourceType==xml
	// null "nullX"
	// TODO uncomment next line --> error because of sourceType==xml
	// dialect MyDialect
	iterator "/Employees/Employee"

	referenceables
		id
		EMPNO
// TODO uncomment next line. error: null "X" is only supported on type csv
// ENAME null "X"	
}

vocabulary employee {
	prefix "employee" "http://example.com/employee"

	classes
		Employee {
			"foobar" : "some additional description",
			"label": "Worker",
			"description": "a person employed for wages or salary, especially at non-executive level",
			"similar": "labourer"
		}

	properties
		no
		yes {
			"description": "an English progressive rock band formed in London in 1968 by singer Jon Anderson"
			// TODO add a , then do code completion - get proposal "label" (among others, but not "description", since this is already in place)
			
			// TODO uncomment next line --> error on duplicated description
			//, "description" : "duplicated description"

			// TODO uncomment next line --> error on key with whitespaces & quickfix to trim
			//, " whitspaced" : "whitespaces are bad"
		}
}

