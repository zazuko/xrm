base "https://schema.example.org/"

// this sample is inspired by https://w3c.github.io/shacl/shacl-compact-syntax/#example

node-shape PersonNodeShape from PersonMapping {
//	deactivated
 
	target-classes
		ex.Person
		
	closed
		
	ignored-properties
		rdf.^type
	
	properties
		ex.ssn {
			cardinality [0..1]
			datatype xsd.string
			pattern "^\\\\d{3}-\\\\d{2}-\\\\d{4}$"
		}
		
		ex.worksFor {
			cardinality [0..*]
			classes ex.Company
		}
	
		ex.address {
			cardinality [0..1]
			node-shapes AddressNodeShape
		}
		
		// this shows the union of all attributes in the expected order of appearance. note that combining all attributes like this doesn't make much sense.
		ex.hasAnything {
			node-kind Any
			cardinality [0..*]
			classes ex.Company
			datatype xsd.string
			node-shapes EmptyNodeShape
		}
		
		// alternatively to embedded property shapes, also support the use of externalized property shapes
		AddressPropertyShape;
		EmptyPropertyShape;
}

node-shape AddressNodeShape {
	properties
		ex.city {
			node-kind Literal
			cardinality [1..1]
			datatype xsd.string
		}

		ex.postalCode {
			node-kind Literal
			cardinality [1..1]
			datatype xsd.string
		}
}

node-shape EmptyNodeShape {
}

property-shape EmptyPropertyShape {
	node-kind Any
	cardinality [0..*]
}

property-shape AddressPropertyShape {
	deactivated

	node-kind BlankNode
	cardinality [0..1]

	path ex.address

	node-shapes AddressNodeShape	
}

// this shows the union of all attributes in the expected order of appearance. note that combining all attributes like this doesn't make much sense.
property-shape AnythingPropertyShape node-kind Any [0..*] {
	deactivated

	path ex.worksFor
	
	classes ex.Company
	datatype xsd.string
	node-shapes EmptyNodeShape
	pattern "^https://data.example.org/"
}
